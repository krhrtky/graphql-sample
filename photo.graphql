scalar Datetime

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortablePhotoField {
  name
  description
  category
  created
}

input PhotoFilter {
  category: PhotoCategory
  createdBeteen: DateRange
  taggedUsers: [ID!]
  searchText
}

input DateRang {
  start:Datetime!
  end: DateTime!
}

input DataPage {
  first: int = 25
  start: int = 0
}

input DataSort {
  sort: SortDirection = DESCENDING
  sortBy: SortablePhotoField = created
}

"""
.最低一度はGitHubで認可されたユーザー
"""
type User {
  """
  ユーザーの一位のGithHubログインID
  """
  githubLogin: ID!
  """
  ユーザーの姓名
  """
  name: String
  """
  ユーザーのGitHubプロフィール画像のURL
  """
  avatoar: String
  """
  このユーザーが投稿した全写真
  """
  postedPhotos(filter: PhotoFilter paging: DatePage sorting: DataSort): [Photo!]!
  """
  このユーザーが含まれる全写真
  """
  inPhotos(filter: PhotoFilter paging: DataPage sorting: DataSort): [Photo!]
  friends: [FriendShip!]!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: Datetime!
  category: PhotoCategory!
  postedBy: User!
  taggedUsers(sorting: DataSort): [User!]!
}

type FriendShip {
  friends: [User!]!
  howLong: Int!
  whereWeMet: Location
}

type Query {
  totalPhotos: Int!
  allPhotos(category: PhotoCategory): [Photo!]!
  totalUsers: Int!
  allUsers(paging: DataPage sorting: DataSort): [User!]!
  User(githubLogin: ID!): User!
  Photo(id: ID!): Photo!
  allPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
    ): [Photo!]!
}

schema {
  query: Query
  mutation: Mutation
  subScription: SubScription
}

"""
postPhotoで送信される入力
"""
input PostPhotoInput {
    "新しい写真の名前"
    name: String!
    "(optional)写真のかんたんな説明"
    description: String
    "(optional)写真のカテゴリ"
    category: PhotoCategory=PORTRAIT
}

type AuthoPayload {
  user: User!
  token: String!
}

type Mutation {
  postPhoro(
      "input: 新しい写真の名前、説明、カテゴリ"
      input: PostPhotoInput!
  ): Photo!
  """
  GitHubユーザーで認可
  """
  githubAutho(
      "ユーザーの認可のために送信されるGitHubの一意のコード"
      code: String!
  ): AuthoPayload!
}

type SubScription {
  newPhoto(category: PhotoCategory): Photo!
  newUser: User!
}
