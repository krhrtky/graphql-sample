scalar Datetime

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortablePhotoField {
  name
  description
  category
  created
}

input PhotoFilter {
  category: PhotoCategory
  createdBeteen: DateRange
  taggedUsers: [ID!]
  searchText
}

input DateRang {
  start:Datetime!
  end: DateTime!
}

input DataPage {
  first: int = 25
  start: int = 0
}

input DataSort {
  sort: SortDirection = DESCENDING
  sortBy: SortablePhotoField = created
}

type User {
  githubLogin: ID!
  name: String
  avatoar: String
  postedPhotos(filter: PhotoFilter paging: DatePage sorting: DataSort): [Photo!]!
  inPhotos(filter: PhotoFilter paging: DataPage sorting: DataSort): [Photo!]
  friends: [FriendShip!]!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: Datetime!
  category: PhotoCategory!
  postedBy: User!
  taggedUsers(sorting: DataSort): [User!]!
}

type FriendShip {
  friends: [User!]!
  howLong: Int!
  whereWeMet: Location
}

type Query {
  totalPhotos: Int!
  allPhotos(category: PhotoCategory): [Photo!]!
  totalUsers: Int!
  allUsers(paging: DataPage sorting: DataSort): [User!]!
  User(githubLogin: ID!): User!
  Photo(id: ID!): Photo!
  allPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
    ): [Photo!]!
}

schema {
  query: Query
  mutation: Mutation
}


input PostPhotoInput {
    name: String!
    description: String
    category: PhotoCategory=PORTRAIT
}

type AuthoPayload {
  user: User!
  token: String!
}

type Mutation {
  postPhoro(input: PostPhotoInput!): Photo!
  githubAutho(code: String!): AuthoPayload!
}

